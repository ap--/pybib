#!/usr/bin/env python3

import argparse
import logging
import requests
import json

import termstyle
from termstyle import cyan

termstyle.auto()

VERSION = '1.3.0'

GET_URL = "http://dx.doi.org/{}"
SEARCH_URL = "http://api.crossref.org/works"

def handle_status_code(r):
    if r.status_code == 200:
        return
    elif r.status_code == 404:
        exit('Unknown')
    else:
        sys.exit("Unhandled http response code: {}".format(r.status_code))

def make_author_list(authors):

    author_list = []

    if not authors:
        return "Anonymous"

    for author in authors:
        given_name = author.get("given", "")
        family_name = author.get("family", "")

        if given_name:
            # Only include the first letter of the author's given name
            given_name = "{}.".format(given_name[0])

        full_name = " ".join([given_name, family_name])
        author_list.append(full_name)

    return ', '.join(author_list)

def search(query):
    payload = {'query': query}

    r = requests.get(SEARCH_URL, params=payload)
    r.encoding = "utf-8"

    handle_status_code(r)

    results = r.json()
    results = results["message"]["items"]
    return results

def get_bibtex(doi):
    url = GET_URL.format(doi)
    headers = {'Accept': 'application/x-bibtex; charset=utf-8'}

    r = requests.get(url, headers=headers)
    r.encoding = "utf-8"

    handle_status_code(r)

    entry = r.text.strip()
    return entry


def search_cmd(args):
    query = " ".join(args.query)
    results = search(query)

    if args.get:
        idx = args.get[0]
        result = results[idx]
        doi = result["DOI"]
        entry = get_bibtex(doi)
        print(entry)
        return

    for i, result in enumerate(results):
        title = result.get("title")
        doi = result.get("DOI")
        author = result.get("author")

        if not title:
            continue

        author_list = make_author_list(author)

        print("{}. {} - {} <{}>".format(i, title[0], author_list, doi))

def get_cmd(args):
    entry = get_bibtex(args.DOI)

    print(entry)

parser = argparse.ArgumentParser(description='Retrieve BibTeX information for Digital Object Identifiers (DOIs)')
parser.add_argument('--version', action='version', version=VERSION)
parser.set_defaults(cmd=None)

subparsers = parser.add_subparsers()

get_parser = subparsers.add_parser('get', help='Retrieve an entry for a DOI')
get_parser.add_argument('DOI', type=str, help='The DOI to get')
get_parser.set_defaults(cmd=get_cmd)

search_parser = subparsers.add_parser('search', help='Search for the DOI of a resource')
search_parser.add_argument('query', nargs='+', help='The query string')
search_parser.add_argument('-g', '--get', nargs=1, type=int, help='The index of the bibliography information to get')
search_parser.set_defaults(cmd=search_cmd)

args = parser.parse_args()

if not args.cmd:
    parser.print_help()
    exit(1)

args.cmd(args)
